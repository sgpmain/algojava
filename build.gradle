plugins {
    id "org.sonarqube" version "1.1"
}

group 'algojava'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'idea'
idea {
    module {
        testSourceDirs += file('src/integrationTest/java')
    }
}

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

sourceSets {
    integrationTest {
        java.srcDir file('src/integrationTest/java')
//        resources.srcDir file('src/test/resources')
    }
}

dependencies {
    compile 'com.google.guava:guava:18.0'
    compile 'log4j:log4j:1.2.17'
    testCompile 'junit:junit:4.12'
    testCompile "org.mockito:mockito-core:1.+"

    // Add the output of the main and test source sets so that the integration tests
    // have access to the compiled classes to run tests against
    integrationTestCompile sourceSets.main.output
    integrationTestCompile sourceSets.test.output

    // Configures the dependency reusing those of the 'test' task.
    // This will allow reusage of JUnit and other mock libraries for instance
    integrationTestCompile configurations.testCompile
    integrationTestRuntime configurations.testRuntime
}

// Extend the Test task
test.beforeTest { descriptor ->
    logger.lifecycle("Running test: " + descriptor)
}
task integrationTest(type: Test) {

    // Generated reports and execution files for JUnit will be copied in these  directories
//    reports.junitXml.destination = file("$buildDir/integration-test-results/")
//    reports.html.destination = file("$buildDir/integration-test-results/")

    // Adds the integration tests classes to the test suite along with
    // the runtime classpath
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath += sourceSets.integrationTest.runtimeClasspath

    // Enable the System.out if you want
//    testLogging.showStandardStreams = true

    // Before each test, log the execution detail for clarity
    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }
}

// When executing the task 'check', we now force the execution of integration tests as well
check.dependsOn integrationTest

// Running integration tests requires that unit tests are executed first
integrationTest.dependsOn test